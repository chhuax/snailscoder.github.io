{"title":"双重校验锁实现对象单例（线程安全）","date":"2020-04-14T12:16:00.000Z","date_formatted":{"ll":"2020年4月14日","L":"2020/04/14","MM-DD":"04-14"},"thumbnail":"https://blogimg-1254014761.cos.ap-beijing.myqcloud.com/2020/04/14/257897.jpg","link":"2020/04/14/java/Singleton","comments":true,"tags":["Java","单例","线程安全"],"categories":["后端"],"updated":"2020-04-14T09:30:30.575Z","content":"<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class Singleton&#123;</span><br><span class=\"line\">    private volatile static Singleton uniqueInstance;</span><br><span class=\"line\">    </span><br><span class=\"line\">    private Singleton()&#123;&#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    public static Singleton getUniqueInstance()&#123;</span><br><span class=\"line\">        &#x2F;&#x2F;先判断对象是否已经实例化过才进行加锁代码</span><br><span class=\"line\">        if(uniqueInstance &#x3D;&#x3D; null)&#123;</span><br><span class=\"line\">            synchronized(Singleton.class)&#123;</span><br><span class=\"line\">                if(uniqueInstance &#x3D;&#x3D; null)&#123;</span><br><span class=\"line\">                    uniqueInstance &#x3D; new Singleton();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return uniqueInstance;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>使用volatile可以禁止JVM的指令重排，保证多线程环境下也能正常运行。</p>\n","prev":{"title":"【转】synchronized关键字最主要的三种使用方式的总结","link":"2020/04/14/java/synchronized"},"next":{"title":"【转】Java 8系列之重新认识HashMap","link":"2020/04/14/java/hashmap-01"},"plink":"https://snailscoder.com/2020/04/14/java/Singleton/","reward":true,"copyright":{"link":"<a href=\"https://snailscoder.com/2020/04/14/java/Singleton/\" title=\"双重校验锁实现对象单例（线程安全）\">https://snailscoder.com/2020/04/14/java/Singleton/</a>","license":"自由转载-非商用-禁止演绎-保持署名(<a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/\" rel=\"external nofollow noopener\" target=\"_blank\">CC BY-NC-ND 4.0</a>)"}}