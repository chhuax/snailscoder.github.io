{"title":"高并发系统：经典分层举例","date":"2020-04-11T17:39:25.000Z","date_formatted":{"ll":"2020年4月11日","L":"2020/04/11","MM-DD":"04-11"},"thumbnail":"https://blogimg-1254014761.cos.ap-beijing.myqcloud.com/2020/04/12/haibian.jpg","link":"2020/04/11/architect/102","comments":true,"tags":["架构","高并发"],"categories":["架构"],"updated":"2020-04-12T03:03:30.526Z","content":"<h5 id=\"1应用三层架构\">1.应用三层架构<a href=\"#1应用三层架构\" title=\"1.应用三层架构\"></a></h5><p><img src=\"https://blogimg-1254014761.cos.ap-beijing.myqcloud.com/2020/04/11/mvc.jpg\" class=\"φcy\" alt=\"mvc\"><br><img src=\"https://blogimg-1254014761.cos.ap-beijing.myqcloud.com/2020/04/11/request.jpg\" class=\"φcy\" alt=\"request\"></p>\n<ul><li>表现层：顾名思义嘛，就是展示数据结果和接受用户指令的，是最靠近用户的一层；</li><li>逻辑层：里面有复杂业务的具体实现；</li><li>数据访问层则：是主要处理和存储之间的交互。</li></ul><hr>\n<h5 id=\"2网络分层架构\">2.网络分层架构<a href=\"#2网络分层架构\" title=\"2.网络分层架构\"></a></h5><p><img src=\"https://blogimg-1254014761.cos.ap-beijing.myqcloud.com/2020/04/11/http.jpg\" class=\"φcy\" alt=\"http\"></p>\n<ul><li>OSI 网络模型，它把整个网络分成了七层，自下而上分别是物理层、数据链路层、网络层、传输层、会话层、表示层和应用层。</li><li>TCP/IP 协议，它把网络简化成了四层，即链路层、网络层、传输层和应用层。每一层各司其职又互相帮助，网络层负责端到端的寻址和建立连接，传输层负责端到端的数据传输等，同时相邻两层还会有数据的交互。这样可以隔离关注点，让不同的层专注做不同的事情。</li></ul><hr>\n<h5 id=\"3linux文件系统分层\">3.Linux文件系统分层<a href=\"#3linux文件系统分层\" title=\"3.Linux文件系统分层\"></a></h5><p><img src=\"https://blogimg-1254014761.cos.ap-beijing.myqcloud.com/2020/04/11/linuxfile.jpg\" class=\"φcy\" alt=\"linuxfile\"></p>\n<p>在文件系统的最上层是虚拟文件系统（VFS），用来屏蔽不同的文件系统之间的差异，提供统一的系统调用接口。虚拟文件系统的下层是 Ext3、Ext4 等各种文件系统，再向下是为了屏蔽不同硬件设备的实现细节，我们抽象出来的单独的一层——通用块设备层，然后就是不同类型的磁盘了。</p>\n<hr>\n<h5 id=\"4阿里系统分层规约\">4.阿里系统分层规约<a href=\"#4阿里系统分层规约\" title=\"4.阿里系统分层规约\"></a></h5><p><img src=\"https://blogimg-1254014761.cos.ap-beijing.myqcloud.com/2020/04/11/java.jpg\" class=\"φcy\" alt=\"java\"></p>\n<ul><li>终端显示层：各端模板渲染并执行显示的层。当前主要是 Velocity 渲染，JS 渲染， JSP 渲染，移动端展示等。</li><li>开放接口层：将 Service 层方法封装成开放接口，同时进行网关安全控制和流量控制等。</li><li>Web 层：主要是对访问控制进行转发，各类基本参数校验，或者不复用的业务简单处理等。</li><li>Service 层：业务逻辑层。</li><li>Manager 层：通用业务处理层。这一层主要有两个作用，其一，你可以将原先 Service 层的一些通用能力下沉到这一层，比如与缓存和存储交互策略，中间件的接入；其二，你也可以在这一层封装对第三方接口的调用，比如调用支付服务，调用审核服务等。</li><li>DAO 层：数据访问层，与底层 MySQL、Oracle、HBase 等进行数据交互。</li><li>外部接口或第三方平台：包括其它部门 RPC 开放接口，基础平台，其它公司的 HTTP 接口。</li></ul>","prev":{"title":"高并发系统：系统可用性的度量","link":"2020/04/11/architect/103"},"next":{"title":"高并发系统：通用设计方法","link":"2020/04/11/architect/101"},"plink":"https://snailscoder.com/2020/04/11/architect/102/","reward":true,"copyright":{"link":"<a href=\"https://snailscoder.com/2020/04/11/architect/102/\" title=\"高并发系统：经典分层举例\">https://snailscoder.com/2020/04/11/architect/102/</a>","license":"自由转载-非商用-禁止演绎-保持署名(<a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/\" rel=\"external nofollow noopener\" target=\"_blank\">CC BY-NC-ND 4.0</a>)"}}