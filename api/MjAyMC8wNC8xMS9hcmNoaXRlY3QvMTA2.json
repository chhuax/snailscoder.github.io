{"title":"高并发系统：池化技术-Tomcat、Undertow连接池","date":"2020-04-11T23:49:25.000Z","date_formatted":{"ll":"2020年4月11日","L":"2020/04/11","MM-DD":"04-11"},"thumbnail":"https://blogimg-1254014761.cos.ap-beijing.myqcloud.com/2020/04/12/qianbi.jpg","link":"2020/04/11/architect/106","comments":true,"tags":["Tomcat","Undertow","架构","高并发"],"categories":["架构"],"updated":"2020-04-12T03:16:53.332Z","content":"<h3 id=\"tomcat配置核心参数\">Tomcat配置核心参数:<a href=\"#tomcat配置核心参数\" title=\"Tomcat配置核心参数:\"></a></h3><p>max-threads:该线程池可以容纳的最大线程数。默认值：200<br><code>server.tomcat.max-threads=1000</code><br>max-connections:接受和处理的最大连接数<br><code>server.tomcat.max-connections=20000</code><br>min-SpareThreads:Tomcat应该始终打开的最小不活跃线程数。默认值：25。<br><code>server.tomcat.min-SpareThreads=20</code><br>acceptCount:可以放到处理队列中的请求数<br><code>server.tomcat.acceptCount=700</code><br>connectionTimeout 连接超时<br><code>server.tomcat.connectionTimeout=1000</code></p>\n<h3 id=\"undertow配置核心参数\">Undertow配置核心参数<a href=\"#undertow配置核心参数\" title=\"Undertow配置核心参数\"></a></h3><p><strong>io-threads:</strong>设置IO线程数, 它主要执行非阻塞的任务,它们会负责多个连接, 默认设置每个CPU核心一个线程.不要设置过大，如果过大，启动项目会报错：打开文件数过多<br><code>server.undertow.io-threads=16</code></p>\n<p><strong>worker-threads:</strong>阻塞任务线程池, 当执行类似servlet请求阻塞IO操作, undertow会从这个线程池中取得线程,它的值设置取决于系统线程执行任务的阻塞系数，默认值是IO线程数*8<br><code>server.undertow.worker-threads=256</code></p>\n<p><strong>buffer-size:</strong>该配置会影响buffer,这些buffer会用于服务器连接的IO操作,有点类似netty的池化内存管理,每块buffer的空间大小,越小的空间被利用越充分，不要设置太大，以免影响其他应用，合适即可<br><code>server.undertow.buffer-size=1024</code></p>\n<p><strong>buffers-per-region:</strong>每个区分配的buffer数量 , 所以pool的大小是buffer-size * buffers-per-region<br><code>server.undertow.buffers-per-region=1024</code></p>\n<p><strong>direct-buffers:</strong>是否分配的直接内存(NIO直接分配的堆外内存)<br><code>server.undertow.direct-buffers=true</code></p>\n<h3 id=\"扩展文章\">扩展文章<a href=\"#扩展文章\" title=\"扩展文章\"></a></h3><ul><li><a href=\"https://my.oschina.net/shyloveliyi/blog/2980868\" target=\"_blank\">SpringBoot服务器压测对比</a></li></ul>","prev":{"title":"高并发系统：数据库优化-读写分离","link":"2020/04/12/architect/107"},"next":{"title":"高并发系统：池化技术-数据库连接池","link":"2020/04/11/architect/105"},"plink":"https://snailscoder.com/2020/04/11/architect/106/","reward":true,"copyright":{"link":"<a href=\"https://snailscoder.com/2020/04/11/architect/106/\" title=\"高并发系统：池化技术-Tomcat、Undertow连接池\">https://snailscoder.com/2020/04/11/architect/106/</a>","license":"自由转载-非商用-禁止演绎-保持署名(<a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/\" rel=\"external nofollow noopener\" target=\"_blank\">CC BY-NC-ND 4.0</a>)"}}